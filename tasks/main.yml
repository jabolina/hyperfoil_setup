- name: Validate that we're running on hyperfoil_controller
  when: inventory_hostname not in groups[hyperfoil_controller_group]
  fail:
    msg: This node ({{ inventory_hostname }}) is not listed in group {{ hyperfoil_controller_group }}
- name: Validate that there's only single controller
  when: (groups[hyperfoil_controller_group] | length) != 1
  fail:
    msg: Only one controller is allowed.
- name: Make sure Hyperfoil is down
  include_role:
    name: hyperfoil.hyperfoil_shutdown
- name: Create driver dir
  file:
    path: '{{ hyperfoil_dir }}'
    state: directory
- name: Work with existing distribution
  when: hyperfoil_distribution is defined
  block:
  - name: Find info about distribution
    delegate_to: localhost
    delegate_facts: true
    stat:
      path: "{{ hyperfoil_distribution }}"
    register: hyperfoil_distribution_stat
    failed_when: not hyperfoil_distribution_stat.stat.exists
  - name: Check if distribution is directory
    set_fact:
      hyperfoil_distribution_isdir: "{{ hyperfoil_distribution_stat.stat.isdir }}"
  - name: Guess version from zip
    when: hyperfoil_version is undefined and not hyperfoil_distribution_isdir
    set_fact:
      hyperfoil_version: "{{ hyperfoil_distribution | regex_replace('^.*/hyperfoil(?:-distribution)?-([^/]*).zip$', '\\1') }}"
  - name: Guess version from dir
    when: hyperfoil_version is undefined and hyperfoil_distribution_isdir
    block:
    - name: Find hyperfoil-core
      delegate_to: localhost
      delegate_facts: true
      find:
        paths: "{{ hyperfoil_distribution }}/lib/"
        patterns: "hyperfoil-core-*.jar"
      register: hyperfoil_core_file
      failed_when: hyperfoil_core_file.matched == 0
    - name: Parse version
      set_fact:
        # hyperfoil_version must be set in the last task in the block as following ones will be ignored
        hyperfoil_version_: "{{ hyperfoil_core_file.files[0].path | regex_replace('^.*/hyperfoil-core-([^/]*).jar$', '\\1') }}"
    - name: Set version
      set_fact:
        hyperfoil_version: "{{ hyperfoil_version_ }}"
        hyperfoil_bin_dir: "{{ hyperfoil_dir }}/hyperfoil-{{ hyperfoil_version_ }}/bin"
  - name: Copy distribution as zip
    when: not hyperfoil_distribution_isdir
    copy:
      src: '{{ hyperfoil_distribution }}'
      dest: '{{ hyperfoil_dir }}/hyperfoil-{{ hyperfoil_version }}.zip'
  - name: Create bin dir
    when: hyperfoil_bin_dir is defined
    file:
      path: "{{ hyperfoil_bin_dir }}"
      state: directory
  - name: Copy distribution as directory
    when: hyperfoil_distribution_isdir | bool
    synchronize:
      src: '{{ hyperfoil_distribution }}/'
      dest: '{{ hyperfoil_dir }}/hyperfoil-{{ hyperfoil_version }}'
- name: Get release from GitHub
  when: hyperfoil_distribution is undefined
  block:
  - name: Get specific release
    when: hyperfoil_version is defined
    block:
    - name: Fetch release with given tag
      uri:
        url: https://api.github.com/repos/Hyperfoil/Hyperfoil/releases/tags/release-{{ hyperfoil_version }}
      register: hyperfoil_release_list
    - name: Set download URL
      set_fact:
        hyperfoil_download_url: "{{ hyperfoil_release_list.json | json_query('assets[0].browser_download_url') }}"
  - name: Get latest release
    when: hyperfoil_version is undefined
    block:
    - name: Fetch latest release
      uri:
        url: https://api.github.com/repos/Hyperfoil/Hyperfoil/releases/latest
      register: hyperfoil_release
    - name: Set download URL and version
      set_fact:
        hyperfoil_version: "{{ hyperfoil_release.json | json_query('tag_name') }}"
        hyperfoil_download_url: "{{ hyperfoil_release.json | json_query('assets[0].browser_download_url') }}"
  - name: Download release
    get_url:
      url: "{{ hyperfoil_download_url }}"
      dest: '{{ hyperfoil_dir }}/hyperfoil-{{ hyperfoil_version }}.zip'
- name: Unpack distribution
  when: hyperfoil_distribution_isdir is undefined or not hyperfoil_distribution_isdir
  block:
  - name: Unzip file
    unarchive:
      src: '{{ hyperfoil_dir }}/hyperfoil-{{ hyperfoil_version }}.zip'
      dest: '{{ hyperfoil_dir }}'
      remote_src: true
      list_files: true
    register: hyperfoil_unarchived
  - name: Set bin dir
    set_fact:
      hyperfoil_bin_dir: "{{ hyperfoil_dir }}/{{ hyperfoil_unarchived.files[0] }}/bin"
- name: Create Hyperfoil command
  set_fact:
    hyperfoil_cmd: >
        {{ hyperfoil_bin_dir }}/controller.sh
        {% if hyperfoil_controller_debug_port is defined %}
        -agentlib:jdwp=transport=dt_socket,server=y,suspend={{ hyperfoil_controller_debug_suspend | default("n", true) }},address={{ hyperfoil_controller_debug_port }}
        {% endif %}
        {% if hyperfoil_agent_debug_port is defined %}
        -Dio.hyperfoil.agent.debug.port={{ hyperfoil_agent_debug_port }}
        {% endif %}
        {% if hyperfoil_agent_debug_suspend is defined %}
        -Dio.hyperfoil.agent.debug.suspend={{ hyperfoil_agent_debug_suspend }}
        {% endif %}
        {% if libperfjava is defined %}
        -XX:+PreserveFramePointer -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -agentpath:{{ libperfjava }}
        {% endif %}
        -ea
        -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath={{ hyperfoil_dir }}
        {% if hyperfoil_log_config is defined %}
        -Dlog4j.configurationFile=file://{{ hyperfoil_log_config }}
        {% endif %}
        -Dio.hyperfoil.rootdir={{ hyperfoil_dir }}/workspace
        -Dio.hyperfoil.controller.host={{ hyperfoil_controller_host | default(ansible_hostname) }}
        -Dio.hyperfoil.controller.port={{ hyperfoil_controller_port }}
        {% if hyperfoil_jfr is defined and (hyperfoil_jfr | bool) %}
        -XX:+FlightRecorder
        -XX:StartFlightRecording=compress=false,delay=10s,duration=24h,settings=profile,filename={{ hyperfoil_dir }}/hfc-{{ ansible_hostname }}.jfr
        {% endif %}
        {% if hyperfoil_trigger_url is defined %}
        -Dio.hyperfoil.trigger.url={{ hyperfoil_trigger_url }}
        {% endif %}
        {% if hyperfoil_controller_args is defined %}
        {{ hyperfoil_controller_args }}
        {% endif %}
        -Dio.hyperfoil.log.controller={{ hyperfoil_dir }}/hfc-{{ ansible_hostname }}.log
- name: Log Hyperfoil command
  shell: echo '{{ hyperfoil_cmd }}' > {{ hyperfoil_dir }}/hfc-{{ ansible_hostname }}.cmd
- name: Start Hyperfoil
  shell: "{{ hyperfoil_cmd | trim }} &> {{ hyperfoil_dir }}/hfc-{{ ansible_hostname }}.log"
  async: 100000
  poll: 0
- name: Wait for Hyperfoil controller to open port
  uri:
    url: "http://{{ ansible_hostname }}:{{ hyperfoil_controller_port}}/"
  register: hyperfoil_status
  until: hyperfoil_status.status == 200
  delay: 1
  retries: "{{ hyperfoil_controller_start_timeout }}"
